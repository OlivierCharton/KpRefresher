<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BusinessService_CustomIdAccountNotMatching" xml:space="preserve">
    <value>KillProof.me account {0} does not match with current GW2 account {1}.</value>
  </data>
  <data name="BusinessService_CustomIdNoAccountFound" xml:space="preserve">
    <value>KillProof.me account {0} does not exist.</value>
  </data>
  <data name="BusinessService_CustomIdSet" xml:space="preserve">
    <value>Custom Id set!</value>
  </data>
  <data name="BusinessService_Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="BusinessService_Refreshed" xml:space="preserve">
    <value>Refreshed</value>
  </data>
  <data name="BusinessService_RefreshNotAvailable" xml:space="preserve">
    <value>Refresh not available</value>
  </data>
  <data name="BusinessService_Wing" xml:space="preserve">
    <value>Wing</value>
  </data>
  <data name="CornerIcon_CancelNotify" xml:space="preserve">
    <value>Cancel notification for next refresh</value>
  </data>
  <data name="CornerIcon_Copy" xml:space="preserve">
    <value>Copy KillProof.me Id to clipboard</value>
  </data>
  <data name="CornerIcon_Notify" xml:space="preserve">
    <value>Notify when refresh available</value>
  </data>
  <data name="CornerIcon_OpenWebsite" xml:space="preserve">
    <value>Open KillProof.me website</value>
  </data>
  <data name="CornerIcon_Refresh" xml:space="preserve">
    <value>Refresh KillProof.me data</value>
  </data>
  <data name="CornerIcon_Tooltip" xml:space="preserve">
    <value>KpRefresher</value>
  </data>
  <data name="CornerIcon_Tooltip_Warning" xml:space="preserve">
    <value>KpRefresher - api error, please wait</value>
  </data>
  <data name="GW2APIService_Bank" xml:space="preserve">
    <value>Bank</value>
  </data>
  <data name="GW2APIService_SharedSlots" xml:space="preserve">
    <value>Shared Slots</value>
  </data>
  <data name="LoadingSpinner_Fetch" xml:space="preserve">
    <value>Fetching Api Data</value>
  </data>
  <data name="MainWindow_Actions_Title" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="MainWindow_Button_ClearNotif_Label" xml:space="preserve">
    <value>Clear notifications</value>
  </data>
  <data name="MainWindow_Button_ClearSchedule_Label" xml:space="preserve">
    <value>Clear schedule</value>
  </data>
  <data name="MainWindow_Button_ClearSchedule_Tooltip" xml:space="preserve">
    <value>Resets any scheduled refresh</value>
  </data>
  <data name="MainWindow_Button_RefreshLinkedAccounts_Label" xml:space="preserve">
    <value>Refresh linked accounts</value>
  </data>
  <data name="MainWindow_Button_RefreshLinkedAccounts_Tooltip" xml:space="preserve">
    <value>Attempts to refresh all linked KillProof.me accounts</value>
  </data>
  <data name="MainWindow_Button_Refresh_Label" xml:space="preserve">
    <value>Refresh KillProof.me</value>
  </data>
  <data name="MainWindow_Button_Refresh_Tooltip" xml:space="preserve">
    <value>Attempts to refresh KillProof.me
If auto-retry is enable, a new refresh will be scheduled in case of failure</value>
  </data>
  <data name="MainWindow_Button_ShowClears_Label" xml:space="preserve">
    <value>Show clears</value>
  </data>
  <data name="MainWindow_Button_ShowClears_Tooltip" xml:space="preserve">
    <value>Displays current raid clears according to KillProof.me and GW2

If the color is green, it means the clear has been registered on KillProof.me
If the color is purple, it means that the clear is visible by GW2 API, and can be added to KillProof.me through refresh</value>
  </data>
  <data name="MainWindow_Button_ShowKP_Label" xml:space="preserve">
    <value>Show current KP</value>
  </data>
  <data name="MainWindow_Button_ShowKP_Tooltip" xml:space="preserve">
    <value>Scan your bank, shared slots and characters and displays current KP according GW2 API.
Every kp in the list is able to be scanned by KillProof.me, if not already scanned. You can use this feature to check if a newly opened chest is already visible for KillProof.me.</value>
  </data>
  <data name="MainWindow_Configuration_Title" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="MainWindow_CustomId_EditNotif" xml:space="preserve">
    <value>Please press enter to save value.</value>
  </data>
  <data name="MainWindow_CustomId_Label" xml:space="preserve">
    <value>Custom Id</value>
  </data>
  <data name="MainWindow_CustomId_Tooltip" xml:space="preserve">
    <value>Overrides the GW2 account name. Only use this option if the default configuration does not work for you.</value>
  </data>
  <data name="MainWindow_DelayBeforeRefreshOnMapChange_Label" xml:space="preserve">
    <value>Delay before refresh</value>
  </data>
  <data name="MainWindow_DelayBeforeRefreshOnMapChange_Tooltip" xml:space="preserve">
    <value>Time in minutes before refresh is triggered after map change (between 1 and 60)</value>
  </data>
  <data name="MainWindow_EnableAutoRetry_Label" xml:space="preserve">
    <value>Enable auto-retry</value>
  </data>
  <data name="MainWindow_EnableAutoRetry_Tooltip" xml:space="preserve">
    <value>Schedule automatically a new try when KillProof.me was not available for a refresh</value>
  </data>
  <data name="MainWindow_EnableRefreshOnKill_Label" xml:space="preserve">
    <value>Condition refresh to clear</value>
  </data>
  <data name="MainWindow_EnableRefreshOnKill_Tooltip" xml:space="preserve">
    <value>Only allow refresh if a clear was made and is visible by GW2 API</value>
  </data>
  <data name="MainWindow_HideAllMessages_Label" xml:space="preserve">
    <value>Hide All Messages</value>
  </data>
  <data name="MainWindow_HideAllMessages_Tooltip" xml:space="preserve">
    <value>Hide all notifications, useful when API down</value>
  </data>
  <data name="MainWindow_Notif_LinkedAccounts" xml:space="preserve">
    <value>{0} linked account{1} found!
{2}</value>
  </data>
  <data name="MainWindow_Notif_Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="MainWindow_Notif_NoLinkedAccount" xml:space="preserve">
    <value>No linked account found!</value>
  </data>
  <data name="MainWindow_Notif_NoSchedule" xml:space="preserve">
    <value>No scheduled refresh</value>
  </data>
  <data name="MainWindow_Notif_ScheduleDisabled" xml:space="preserve">
    <value>Scheduled refresh disabled!</value>
  </data>
  <data name="MainWindow_RefreshOnKillOnlyBoss_Label" xml:space="preserve">
    <value>Refresh on final boss kill</value>
  </data>
  <data name="MainWindow_RefreshOnKillOnlyBoss_Tooltip" xml:space="preserve">
    <value>Only refresh if a final raid wing boss was cleared (e.g. Sabetha)</value>
  </data>
  <data name="MainWindow_RefreshOnMapChange_Label" xml:space="preserve">
    <value>Refresh on map change</value>
  </data>
  <data name="MainWindow_RefreshOnMapChange_Tooltip" xml:space="preserve">
    <value>Schedule a refresh when leaving a raid or strike map</value>
  </data>
  <data name="MainWindow_ShowScheduleNotification_Label" xml:space="preserve">
    <value>Show auto-retry notifications</value>
  </data>
  <data name="MainWindow_ShowScheduleNotification_Tooltip" xml:space="preserve">
    <value>Display notification when retry is scheduled</value>
  </data>
  <data name="MainWindow_Spinner_Minutes" xml:space="preserve">
    <value>Next retry in {0} minute{1}.</value>
  </data>
  <data name="MainWindow_Spinner_Seconds" xml:space="preserve">
    <value>Next retry in {0} second{1}.</value>
  </data>
  <data name="Notification_CopiedToClipboard" xml:space="preserve">
    <value>[KpRefresher] Id copied to clipboard!</value>
  </data>
  <data name="Notification_CustomIdAccountNotMatching" xml:space="preserve">
    <value>[KpRefresher] KillProof.me account {0} does not match
with current GW2 account {1}.</value>
  </data>
  <data name="Notification_DataNotAvailable" xml:space="preserve">
    <value>[KpRefresher] KillProof.me data not available
Please retry later.</value>
  </data>
  <data name="Notification_InstanceExitDetected" xml:space="preserve">
    <value>[KpRefresher] Instance exit detected, refresh scheduled in {0} minute{1}</value>
  </data>
  <data name="Notification_KpAccountAnonymous" xml:space="preserve">
    <value>[KpRefresher] Refresh failed : please allow anonymous refresh
in your KillProof.me settings</value>
  </data>
  <data name="Notification_KpAccountUnknown" xml:space="preserve">
    <value>[KpRefresher] KillProof.me Id {0} does not exist!</value>
  </data>
  <data name="Notification_KPProfileFetchError" xml:space="preserve">
    <value>[KpRefresher] Error while loading KillProof.me profile.
Please retry later.</value>
  </data>
  <data name="Notification_NextRefreshAvailableIn" xml:space="preserve">
    <value>[KpRefresher] Next refresh available in {0} minute{1}</value>
  </data>
  <data name="Notification_NoClearRefreshAborted" xml:space="preserve">
    <value>[KpRefresher] No new clear validating settings, refresh aborted!</value>
  </data>
  <data name="Notification_NotifyScheduled" xml:space="preserve">
    <value>[KpRefresher] You will be notified when next refresh is available,
in approx. {0} minute{1}.</value>
  </data>
  <data name="Notification_RefreshAvailable" xml:space="preserve">
    <value>[KpRefresher] Next refresh is available!</value>
  </data>
  <data name="Notification_RefreshNotAvailable" xml:space="preserve">
    <value>[KpRefresher] KillProof.me refresh was not available
Please retry later.</value>
  </data>
  <data name="Notification_RefreshNotAvailableRetry" xml:space="preserve">
    <value>[KpRefresher] KillProof.me refresh was not available
Auto-retry in 5 minutes.</value>
  </data>
  <data name="Notification_RefreshOk" xml:space="preserve">
    <value>[KpRefresher] KillProof.me refresh successful!</value>
  </data>
  <data name="Notification_TryScheduled" xml:space="preserve">
    <value>{0}
A new try has been scheduled.</value>
  </data>
</root>