//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KpRefresher.Ressources {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal strings() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("KpRefresher.Ressources.strings", typeof(strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à KillProof.me account {0} does not match with current GW2 account {1}..
        /// </summary>
        internal static string BusinessService_CustomIdAccountNotMatching {
            get {
                return ResourceManager.GetString("BusinessService_CustomIdAccountNotMatching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à KillProof.me account {0} does not exist..
        /// </summary>
        internal static string BusinessService_CustomIdNoAccountFound {
            get {
                return ResourceManager.GetString("BusinessService_CustomIdNoAccountFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Custom Id set!.
        /// </summary>
        internal static string BusinessService_CustomIdSet {
            get {
                return ResourceManager.GetString("BusinessService_CustomIdSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Error.
        /// </summary>
        internal static string BusinessService_Error {
            get {
                return ResourceManager.GetString("BusinessService_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Refreshed.
        /// </summary>
        internal static string BusinessService_Refreshed {
            get {
                return ResourceManager.GetString("BusinessService_Refreshed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Refresh not available.
        /// </summary>
        internal static string BusinessService_RefreshNotAvailable {
            get {
                return ResourceManager.GetString("BusinessService_RefreshNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Wing.
        /// </summary>
        internal static string BusinessService_Wing {
            get {
                return ResourceManager.GetString("BusinessService_Wing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Cancel notification for next refresh.
        /// </summary>
        internal static string CornerIcon_CancelNotify {
            get {
                return ResourceManager.GetString("CornerIcon_CancelNotify", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Copy KillProof.me Id to clipboard.
        /// </summary>
        internal static string CornerIcon_Copy {
            get {
                return ResourceManager.GetString("CornerIcon_Copy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Notify when refresh available.
        /// </summary>
        internal static string CornerIcon_Notify {
            get {
                return ResourceManager.GetString("CornerIcon_Notify", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Open KillProof.me website.
        /// </summary>
        internal static string CornerIcon_OpenWebsite {
            get {
                return ResourceManager.GetString("CornerIcon_OpenWebsite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Refresh KillProof.me data.
        /// </summary>
        internal static string CornerIcon_Refresh {
            get {
                return ResourceManager.GetString("CornerIcon_Refresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à KpRefresher.
        /// </summary>
        internal static string CornerIcon_Tooltip {
            get {
                return ResourceManager.GetString("CornerIcon_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à KpRefresher - api error, please wait.
        /// </summary>
        internal static string CornerIcon_Tooltip_Warning {
            get {
                return ResourceManager.GetString("CornerIcon_Tooltip_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Bank.
        /// </summary>
        internal static string GW2APIService_Bank {
            get {
                return ResourceManager.GetString("GW2APIService_Bank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Shared Slots.
        /// </summary>
        internal static string GW2APIService_SharedSlots {
            get {
                return ResourceManager.GetString("GW2APIService_SharedSlots", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Fetching Api Data.
        /// </summary>
        internal static string LoadingSpinner_Fetch {
            get {
                return ResourceManager.GetString("LoadingSpinner_Fetch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Actions.
        /// </summary>
        internal static string MainWindow_Actions_Title {
            get {
                return ResourceManager.GetString("MainWindow_Actions_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Clear notifications.
        /// </summary>
        internal static string MainWindow_Button_ClearNotif_Label {
            get {
                return ResourceManager.GetString("MainWindow_Button_ClearNotif_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Clear schedule.
        /// </summary>
        internal static string MainWindow_Button_ClearSchedule_Label {
            get {
                return ResourceManager.GetString("MainWindow_Button_ClearSchedule_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Resets any scheduled refresh.
        /// </summary>
        internal static string MainWindow_Button_ClearSchedule_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_Button_ClearSchedule_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Refresh KillProof.me.
        /// </summary>
        internal static string MainWindow_Button_Refresh_Label {
            get {
                return ResourceManager.GetString("MainWindow_Button_Refresh_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Attempts to refresh KillProof.me
        ///If auto-retry is enable, a new refresh will be scheduled in case of failure.
        /// </summary>
        internal static string MainWindow_Button_Refresh_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_Button_Refresh_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Refresh linked accounts.
        /// </summary>
        internal static string MainWindow_Button_RefreshLinkedAccounts_Label {
            get {
                return ResourceManager.GetString("MainWindow_Button_RefreshLinkedAccounts_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Attempts to refresh all linked KillProof.me accounts.
        /// </summary>
        internal static string MainWindow_Button_RefreshLinkedAccounts_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_Button_RefreshLinkedAccounts_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Show clears.
        /// </summary>
        internal static string MainWindow_Button_ShowClears_Label {
            get {
                return ResourceManager.GetString("MainWindow_Button_ShowClears_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Displays current raid clears according to KillProof.me and GW2
        ///
        ///If the color is green, it means the clear has been registered on KillProof.me
        ///If the color is purple, it means that the clear is visible by GW2 API, and can be added to KillProof.me through refresh.
        /// </summary>
        internal static string MainWindow_Button_ShowClears_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_Button_ShowClears_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Show current KP.
        /// </summary>
        internal static string MainWindow_Button_ShowKP_Label {
            get {
                return ResourceManager.GetString("MainWindow_Button_ShowKP_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Scan your bank, shared slots and characters and displays current KP according GW2 API.
        ///Every kp in the list is able to be scanned by KillProof.me, if not already scanned. You can use this feature to check if a newly opened chest is already visible for KillProof.me..
        /// </summary>
        internal static string MainWindow_Button_ShowKP_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_Button_ShowKP_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Configuration.
        /// </summary>
        internal static string MainWindow_Configuration_Title {
            get {
                return ResourceManager.GetString("MainWindow_Configuration_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Please press enter to save value..
        /// </summary>
        internal static string MainWindow_CustomId_EditNotif {
            get {
                return ResourceManager.GetString("MainWindow_CustomId_EditNotif", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Custom Id.
        /// </summary>
        internal static string MainWindow_CustomId_Label {
            get {
                return ResourceManager.GetString("MainWindow_CustomId_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Overrides the GW2 account name. Only use this option if the default configuration does not work for you..
        /// </summary>
        internal static string MainWindow_CustomId_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_CustomId_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delay before refresh.
        /// </summary>
        internal static string MainWindow_DelayBeforeRefreshOnMapChange_Label {
            get {
                return ResourceManager.GetString("MainWindow_DelayBeforeRefreshOnMapChange_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Time in minutes before refresh is triggered after map change (between 1 and 60).
        /// </summary>
        internal static string MainWindow_DelayBeforeRefreshOnMapChange_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_DelayBeforeRefreshOnMapChange_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Enable auto-retry.
        /// </summary>
        internal static string MainWindow_EnableAutoRetry_Label {
            get {
                return ResourceManager.GetString("MainWindow_EnableAutoRetry_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Schedule automatically a new try when KillProof.me was not available for a refresh.
        /// </summary>
        internal static string MainWindow_EnableAutoRetry_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_EnableAutoRetry_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Condition refresh to clear.
        /// </summary>
        internal static string MainWindow_EnableRefreshOnKill_Label {
            get {
                return ResourceManager.GetString("MainWindow_EnableRefreshOnKill_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Only allow refresh if a clear was made and is visible by GW2 API.
        /// </summary>
        internal static string MainWindow_EnableRefreshOnKill_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_EnableRefreshOnKill_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Hide All Messages.
        /// </summary>
        internal static string MainWindow_HideAllMessages_Label {
            get {
                return ResourceManager.GetString("MainWindow_HideAllMessages_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Hide all notifications, useful when API down.
        /// </summary>
        internal static string MainWindow_HideAllMessages_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_HideAllMessages_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à {0} linked account{1} found!
        ///{2}.
        /// </summary>
        internal static string MainWindow_Notif_LinkedAccounts {
            get {
                return ResourceManager.GetString("MainWindow_Notif_LinkedAccounts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Loading....
        /// </summary>
        internal static string MainWindow_Notif_Loading {
            get {
                return ResourceManager.GetString("MainWindow_Notif_Loading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à No linked account found!.
        /// </summary>
        internal static string MainWindow_Notif_NoLinkedAccount {
            get {
                return ResourceManager.GetString("MainWindow_Notif_NoLinkedAccount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à No scheduled refresh.
        /// </summary>
        internal static string MainWindow_Notif_NoSchedule {
            get {
                return ResourceManager.GetString("MainWindow_Notif_NoSchedule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Scheduled refresh disabled!.
        /// </summary>
        internal static string MainWindow_Notif_ScheduleDisabled {
            get {
                return ResourceManager.GetString("MainWindow_Notif_ScheduleDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Refresh on final boss kill.
        /// </summary>
        internal static string MainWindow_RefreshOnKillOnlyBoss_Label {
            get {
                return ResourceManager.GetString("MainWindow_RefreshOnKillOnlyBoss_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Only refresh if a final raid wing boss was cleared (e.g. Sabetha).
        /// </summary>
        internal static string MainWindow_RefreshOnKillOnlyBoss_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_RefreshOnKillOnlyBoss_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Refresh on map change.
        /// </summary>
        internal static string MainWindow_RefreshOnMapChange_Label {
            get {
                return ResourceManager.GetString("MainWindow_RefreshOnMapChange_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Schedule a refresh when leaving a raid or strike map.
        /// </summary>
        internal static string MainWindow_RefreshOnMapChange_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_RefreshOnMapChange_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Show auto-retry notifications.
        /// </summary>
        internal static string MainWindow_ShowScheduleNotification_Label {
            get {
                return ResourceManager.GetString("MainWindow_ShowScheduleNotification_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Display notification when retry is scheduled.
        /// </summary>
        internal static string MainWindow_ShowScheduleNotification_Tooltip {
            get {
                return ResourceManager.GetString("MainWindow_ShowScheduleNotification_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Next retry in {0} minute{1}..
        /// </summary>
        internal static string MainWindow_Spinner_Minutes {
            get {
                return ResourceManager.GetString("MainWindow_Spinner_Minutes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Next retry in {0} second{1}..
        /// </summary>
        internal static string MainWindow_Spinner_Seconds {
            get {
                return ResourceManager.GetString("MainWindow_Spinner_Seconds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] Id copied to clipboard!.
        /// </summary>
        internal static string Notification_CopiedToClipboard {
            get {
                return ResourceManager.GetString("Notification_CopiedToClipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] KillProof.me account {0} does not match
        ///with current GW2 account {1}..
        /// </summary>
        internal static string Notification_CustomIdAccountNotMatching {
            get {
                return ResourceManager.GetString("Notification_CustomIdAccountNotMatching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] KillProof.me data not available
        ///Please retry later..
        /// </summary>
        internal static string Notification_DataNotAvailable {
            get {
                return ResourceManager.GetString("Notification_DataNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] Instance exit detected, refresh scheduled in {0} minute{1}.
        /// </summary>
        internal static string Notification_InstanceExitDetected {
            get {
                return ResourceManager.GetString("Notification_InstanceExitDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] Refresh failed : please allow anonymous refresh
        ///in your KillProof.me settings.
        /// </summary>
        internal static string Notification_KpAccountAnonymous {
            get {
                return ResourceManager.GetString("Notification_KpAccountAnonymous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] KillProof.me Id {0} does not exist!.
        /// </summary>
        internal static string Notification_KpAccountUnknown {
            get {
                return ResourceManager.GetString("Notification_KpAccountUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] Error while loading KillProof.me profile.
        ///Please retry later..
        /// </summary>
        internal static string Notification_KPProfileFetchError {
            get {
                return ResourceManager.GetString("Notification_KPProfileFetchError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] Next refresh available in {0} minute{1}.
        /// </summary>
        internal static string Notification_NextRefreshAvailableIn {
            get {
                return ResourceManager.GetString("Notification_NextRefreshAvailableIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] No new clear validating settings, refresh aborted!.
        /// </summary>
        internal static string Notification_NoClearRefreshAborted {
            get {
                return ResourceManager.GetString("Notification_NoClearRefreshAborted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] You will be notified when next refresh is available,
        ///in approx. {0} minute{1}..
        /// </summary>
        internal static string Notification_NotifyScheduled {
            get {
                return ResourceManager.GetString("Notification_NotifyScheduled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] Next refresh is available!.
        /// </summary>
        internal static string Notification_RefreshAvailable {
            get {
                return ResourceManager.GetString("Notification_RefreshAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] KillProof.me refresh was not available
        ///Please retry later..
        /// </summary>
        internal static string Notification_RefreshNotAvailable {
            get {
                return ResourceManager.GetString("Notification_RefreshNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] KillProof.me refresh was not available
        ///Auto-retry in 5 minutes..
        /// </summary>
        internal static string Notification_RefreshNotAvailableRetry {
            get {
                return ResourceManager.GetString("Notification_RefreshNotAvailableRetry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [KpRefresher] KillProof.me refresh successful!.
        /// </summary>
        internal static string Notification_RefreshOk {
            get {
                return ResourceManager.GetString("Notification_RefreshOk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à {0}
        ///A new try has been scheduled..
        /// </summary>
        internal static string Notification_TryScheduled {
            get {
                return ResourceManager.GetString("Notification_TryScheduled", resourceCulture);
            }
        }
    }
}
